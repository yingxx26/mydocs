- redisTemplate.opsForValue() ：操作字符串
- redisTemplate.opsForHash() ：操作hash
- redisTemplate.opsForList()：操作list
- redisTemplate.opsForSet()：操作set
- redisTemplate.opsForZSet()：操作zset，可排序的set

- String：等同于java中的，`Map<String,String>`
- hash：等同于java中的：`Map<String,Map<String,String>>
- list：等同于java中的`Map<String,List<String>>`
- set：等同于java中的`Map<String,Set<String>>`
- sort_set：可排序的set


线程安全问题
只要不是复合操作，一定的延迟是可以的


WATCH 说明
WATCH 到底是什么意思呢? 这个命令使得 EXEC 命令的执行必须满足一个条件：如果被WATCH的 keys 没有一个被更改(但它们可以在事务中被修改)，则执行事务；不然，就不会执行这个事务。(注意，如果你 WATCH了一个有生命周期的key，并且这个key过期了， EXEC 依然会执行)



单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。
事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。事


redis事务（Transaction）命令
1.watch
用于监视一个或多个key，如果在事务执行之前这个或（这些）key被其他命令所改动，事务将被中断。

2.unwatch
用于取消watch命令对所有key的监视。

3.multi
用于标记一个事务块的开始，之后的所有命令都存放在队列，等遇到exec命令再执行。

4.exec
用于执行事务块内所有的命令，如果命令被中断，返回false
