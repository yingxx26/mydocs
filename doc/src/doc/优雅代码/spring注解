一，@import注解
public class FebsCloudApplicationSelector implements ImportSelector {

    @Override
    public String[] selectImports(AnnotationMetadata annotationMetadata) {
        return new String[]{
                FebsAuthExceptionConfigure.class.getName(),
                FebsOAuth2FeignConfigure.class.getName(),
                FebsServerProtectConfigure.class.getName()
        };
    }
}

@Import(FebsCloudApplicationSelector.class)

二.
顺序

1，构造函数 ，属性赋值
2，在初始化之前 BeanPostProcessor.postProcessBeforeInitialization
3，afterPropertiesSet
4，@PostConstruct 其实也是BeanPostProcessor实现的
5，在初始化之后 BeanPostProcessor.postProcessAfterInitialization

实现ApplicationContextAware为什么能获取ApplicationContext？
在ApplicationContextAwareProcessor这个处理器中【系统初始化时beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));】
的postProcessBeforeInitialization判断该bean是否实现ApplicationContextAware，如果实现则bean.setApplicationContext(applicationContext)

三，
1，在Spring中，BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。BeanFactory只是个接口，并不是IOC容器的具体实现，
但是Spring容器给出了很多种实现，如 DefaultListableBeanFactory、XmlBeanFactory、ApplicationContext等，其中XmlBeanFactory就是常用的一个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。

2，一般情况下，Spring通过反射机制利用<bean>的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在<bean>中提供大量的配置信息。配置方式的灵活性是受限的，
这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。
